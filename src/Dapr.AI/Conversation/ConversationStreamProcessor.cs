// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using System.Threading.Channels;
using Grpc.Core;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.AI.Conversation;

/// <summary>
/// Provides the implementation to process the streamed response from a conversation endpoint invocation. 
/// </summary>
internal sealed class ConversationStreamProcessor : IDisposable
{
    private bool disposed;
    private readonly Channel<string> outputChannel = Channel.CreateUnbounded<string>();

    /// <summary>
    /// Surfaces any exceptions encountered while asynchronously processing the outbound stream.
    /// </summary>
    internal event EventHandler<Exception>? OnException;

    /// <summary>
    /// Reads the chunks out asynchronously from the streaming source into the channel.
    /// </summary>
    /// <param name="call">The call made to the Dapr sidecar to process the response from.</param>
    /// <param name="cancellationToken">Token used to cancel the ongoing request.</param>
    public Task ProcessStreamAsync(
        AsyncServerStreamingCall<Autogenerated.ConversationStreamResponse> call,
        CancellationToken cancellationToken)
    {
        // Start reading from the gRPC call and writing to the output channel.
        _ = Task.Run(async () =>
        {
            try
            {
                await foreach (var response in call.ResponseStream.ReadAllAsync(cancellationToken))
                {
                    await outputChannel.Writer.WriteAsync(response.Chunk.Content, cancellationToken);
                }
            }
            catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)
            {
                // Expected cancellation exception
            }
            catch (Exception ex)
            {
                OnException?.Invoke(this, ex);
            }
            finally
            {
                outputChannel.Writer.Complete();
            }
        }, cancellationToken);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    private void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                outputChannel.Writer.TryComplete();
            }

            disposed = true;
        }
    }

    /// <summary>
    /// Retrieves the processed content from the operation from the Dapr sidecar and returns as an
    /// enumerable stream.
    /// </summary>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns></returns>
    public async IAsyncEnumerable<string> GetProcessedDataAsync([EnumeratorCancellation] CancellationToken cancellationToken)
    {
        await foreach (var data in outputChannel.Reader.ReadAllAsync(cancellationToken))
        {
            yield return data;
        }
    }
}
