// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using Dapr.Common;
using Dapr.Common.Extensions;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.AI.Conversation;

/// <summary>
/// Used to initialize a new instance of a <see cref="DaprConversationClient"/>.
/// </summary>
/// <param name="client">The Dapr client.</param>
/// <param name="httpClient">The HTTP client used by the client for calling the Dapr runtime.</param>
/// <param name="daprApiToken">An optional token required to send requests to the Dapr sidecar.</param>
internal sealed class DaprConversationGrpcClient(Autogenerated.Dapr.DaprClient client, HttpClient httpClient, string? daprApiToken = null) : DaprConversationClient(client, httpClient, daprApiToken: daprApiToken)
{ 
    /// <summary>
    /// Sends various inputs to the large language model via the Conversational building block on the Dapr sidecar.
    /// </summary>
    /// <param name="daprConversationComponentName">The name of the Dapr conversation component.</param>
    /// <param name="inputs">The input values to send.</param>
    /// <param name="options">Optional options used to configure the conversation.</param>
    /// <param name="cancellationToken">Cancellation token.</param>
    /// <returns>The response(s) provided by the LLM provider.</returns>
    public override async Task<DaprConversationResponse> ConverseAsync(string daprConversationComponentName, IReadOnlyList<DaprConversationInput> inputs, ConversationOptions? options = null,
        CancellationToken cancellationToken = default)
    {
        var request = new Autogenerated.ConversationRequest
        {
            Name = daprConversationComponentName
        };

        if (options is not null)
        {
            if (options.ConversationId is not null)
            {
                request.ContextID = options.ConversationId;
            }

            request.ScrubPII = options.ScrubPII;

            foreach (var (key, value) in options.Metadata)
            {
                request.Metadata.Add(key, value);
            }

            foreach (var (key, value) in options.Parameters)
            {
                request.Parameters.Add(key, value);
            }
        }

        foreach (var input in inputs)
        {
            request.Inputs.Add(new Autogenerated.ConversationInput
            {
                ScrubPII = input.ScrubPII,
                Content = input.Content,
                Role = input.Role.GetValueFromEnumMember()
            });
        }

        var grpCCallOptions =
            DaprClientUtilities.ConfigureGrpcCallOptions(typeof(DaprConversationClient).Assembly, this.DaprApiToken,
                cancellationToken);

        var result = await Client.ConverseAlpha1Async(request, grpCCallOptions).ConfigureAwait(false);
        var outputs = result.Outputs.Select(output => new DaprConversationResult(output.Result)
        {
            Parameters = output.Parameters.ToDictionary(kvp => kvp.Key, parameter => parameter.Value)
        }).ToList();

        return new DaprConversationResponse(outputs);
    }

    /// <inheritdoc />
    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            this.HttpClient.Dispose();
        }
    }
}
