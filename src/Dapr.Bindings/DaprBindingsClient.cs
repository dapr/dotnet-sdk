// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using System.Text.Json;
using Dapr.Bindings.Models;
using Dapr.Common;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1.Dapr;

namespace Dapr.Bindings;

/// <summary>
/// <para>
/// Defines client operations for managing Dapr jobs.
/// Register the <see cref="DaprBindingsClient"/> for use via dependency injection with
/// <see><cref>DaprJobsServiceCollectionExtensions.AddDaprJobsClient</cref></see>.
/// </para>
/// <para>
/// Implementations of <see cref="DaprBindingsClient"/> implement <see cref="IDisposable"/> because the
/// client accesses network resources. For best performance, create a single long-lived client instance
/// and share it for the lifetime of the application. This is done for you if created via the DI extensions. Avoid
/// creating a disposing a client instance for each operation that the application performs - this can lead to socket
/// exhaustion and other problems.
/// </para>
/// </summary>
public abstract class DaprBindingsClient(
    Autogenerated.DaprClient client,
    HttpClient httpClient,
    JsonSerializerOptions jsonSerializerOptions,
    string? daprApiToken = null) : IDaprClient
{
    private bool disposed;
    
    /// <summary>
    /// The HTTP client used by the client for calling the Dapr runtime.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal readonly HttpClient HttpClient = httpClient;

    /// <summary>
    /// The Dapr API token value.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal readonly string? DaprApiToken = daprApiToken;

    /// <summary>
    /// The autogenerated Dapr client.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal Autogenerated.DaprClient Client { get; } = client;

    /// <summary>
    /// The JSON serializer options.
    /// </summary>
    /// <remarks>
    /// Property exposed for testing purposes.
    /// </remarks>
    internal JsonSerializerOptions JsonSerializerOptions { get; } = jsonSerializerOptions;

    /// <summary>
    /// Invokes an output binding.
    /// </summary>
    /// <typeparam name="TRequest">The type of the data that will be JSON serialized and provided as the binding payload.</typeparam>
    /// <param name="bindingName">The name of the binding to sent the event to.</param>
    /// <param name="operation">The type of operation to perform on the binding.</param>
    /// <param name="data">The data that will be JSON serialized and provided as the binding payload.</param>
    /// <param name="metadata">A collection of metadata key-value pairs that will be provided to the binding. The valid metadata keys and values are determined by the type of binding used.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="Task" /> that will complete when the operation has completed.</returns>
    public abstract Task InvokeBindingAsync<TRequest>(
        string bindingName,
        string operation,
        TRequest data,
        IReadOnlyDictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Invokes an output binding.
    /// </summary>
    /// <typeparam name="TRequest">The type of the data that will be JSON serialized and provided as the binding payload.</typeparam>
    /// <typeparam name="TResponse">The type of the data that will be JSON deserialized from the binding response.</typeparam>
    /// <param name="bindingName">The name of the binding to sent the event to.</param>
    /// <param name="operation">The type of operation to perform on the binding.</param>
    /// <param name="data">The data that will be JSON serialized and provided as the binding payload.</param>
    /// <param name="metadata">A collection of metadata key-value pairs that will be provided to the binding. The valid metadata keys and values are determined by the type of binding used.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="Task{T}" /> that will complete when the operation has completed.</returns>
    public abstract Task<TResponse?> InvokeBindingAsync<TRequest, TResponse>(
        string bindingName,
        string operation,
        TRequest data,
        IReadOnlyDictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// Invokes a binding with the provided <paramref name="request" />. This method allows for control of the binding
    /// input and output using raw bytes.
    /// </summary>
    /// <param name="request">The <see cref="DaprBindingRequest" /> to send.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="Task{T}" /> that will complete when the operation has completed.</returns>
    public abstract Task<DaprBindingResponse> InvokeBindingAsync(DaprBindingRequest request, CancellationToken cancellationToken = default);
    
    internal static KeyValuePair<string, string>? GetDaprApiTokenHeader(string apiToken)
    {
        if (string.IsNullOrWhiteSpace(apiToken))
        {
            return null;
        }

        return new KeyValuePair<string, string>("dapr-api-token", apiToken);
    }

    /// <inheritdoc />
    public void Dispose()
    {
        if (!this.disposed)
        {
            Dispose(disposing: true);
            this.disposed = true;
        }
    }

    /// <summary>
    /// Disposes the resources associated with the object.
    /// </summary>
    /// <param name="disposing"><c>true</c> if called by a call to the <c>Dispose</c> method; otherwise false.</param>
    protected virtual void Dispose(bool disposing)
    {
    }
}
