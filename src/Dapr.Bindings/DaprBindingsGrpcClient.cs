// ------------------------------------------------------------------------
//  Copyright 2025 The Dapr Authors
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ------------------------------------------------------------------------

using System.Text.Json;
using Dapr.Bindings.Models;
using Dapr.Common;
using Google.Protobuf;
using Grpc.Core;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.Bindings;

/// <summary>
/// A client for interacting with the Dapr Bindings endpoints.
/// </summary>
internal sealed class DaprBindingsGrpcClient(
    Autogenerated.Dapr.DaprClient client,
    HttpClient httpClient,
    JsonSerializerOptions jsonSerializerOptions,
    string? daprApiToken = null) : DaprBindingsClient(client, httpClient, jsonSerializerOptions, daprApiToken)
{
    /// <summary>
    /// Invokes an output binding.
    /// </summary>
    /// <typeparam name="TRequest">The type of the data that will be JSON serialized and provided as the binding payload.</typeparam>
    /// <param name="bindingName">The name of the binding to sent the event to.</param>
    /// <param name="operation">The type of operation to perform on the binding.</param>
    /// <param name="data">The data that will be JSON serialized and provided as the binding payload.</param>
    /// <param name="metadata">A collection of metadata key-value pairs that will be provided to the binding. The valid metadata keys and values are determined by the type of binding used.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="Task" /> that will complete when the operation has completed.</returns>
    public override async Task InvokeBindingAsync<TRequest>(
        string bindingName,
        string operation,
        TRequest data,
        IReadOnlyDictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default)
    {
        ArgumentException.ThrowIfNullOrEmpty(bindingName, nameof(bindingName));
        ArgumentException.ThrowIfNullOrEmpty(operation, nameof(operation));

        var serializedBytes = JsonSerializer.SerializeToUtf8Bytes(data, JsonSerializerOptions);
        var bytes = ByteString.CopyFrom(serializedBytes);
        await MakeInvokeBindingRequestAsync(bindingName, operation, bytes, metadata, cancellationToken);
    }

    /// <summary>
    /// Invokes an output binding.
    /// </summary>
    /// <typeparam name="TRequest">The type of the data that will be JSON serialized and provided as the binding payload.</typeparam>
    /// <typeparam name="TResponse">The type of the data that will be JSON deserialized from the binding response.</typeparam>
    /// <param name="bindingName">The name of the binding to sent the event to.</param>
    /// <param name="operation">The type of operation to perform on the binding.</param>
    /// <param name="data">The data that will be JSON serialized and provided as the binding payload.</param>
    /// <param name="metadata">A collection of metadata key-value pairs that will be provided to the binding. The valid metadata keys and values are determined by the type of binding used.</param>
    /// <param name="cancellationToken">A <see cref="CancellationToken" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="Task{T}" /> that will complete when the operation has completed.</returns>
    public override async Task<TResponse?> InvokeBindingAsync<TRequest, TResponse>(
        string bindingName,
        string operation,
        TRequest data,
        IReadOnlyDictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default) where TResponse : default
    {
        ArgumentException.ThrowIfNullOrEmpty(bindingName, nameof(bindingName));
        ArgumentException.ThrowIfNullOrEmpty(operation, nameof(operation));

        var serializedBytes = JsonSerializer.SerializeToUtf8Bytes(data, JsonSerializerOptions);
        var bytes = ByteString.CopyFrom(serializedBytes);
        var response = await MakeInvokeBindingRequestAsync(bindingName, operation, bytes, metadata, cancellationToken);

        try
        {
            return response.Data.Length == 0
                ? default
                : JsonSerializer.Deserialize<TResponse>(bytes.Span, JsonSerializerOptions);}
        catch (JsonException ex)
        {
            throw new DaprException(
                "Binding operation failed: the response payload could not be deserialized. See InnerException for details.",
                ex);
        }
    }

    /// <summary>
    /// Invokes a binding with the provided <paramref name="request" />. This method allows for control of the binding
    /// input and output using raw bytes.
    /// </summary>
    /// <param name="request">The <see cref="DaprBindingRequest" /> to send.</param>
    /// <param name="cancellationToken">A <see cref="Task{TResult}" /> that can be used to cancel the operation.</param>
    /// <returns>A <see cref="DaprBindingRequest" /> that will complete when the operation has completed.</returns>
    public override async Task<DaprBindingResponse> InvokeBindingAsync(DaprBindingRequest request, CancellationToken cancellationToken = default)
    {
        var bytes = ByteString.CopyFrom(request.Data.Span);
        var response = await MakeInvokeBindingRequestAsync(request.BindingName, request.Operation, bytes,
            request.Metadata, cancellationToken);
        return new DaprBindingResponse(request, response.Data.Memory, response.Metadata);
    }

    private async Task<Autogenerated.InvokeBindingResponse> MakeInvokeBindingRequestAsync(
        string name,
        string operation,
        ByteString? data = null,
        IReadOnlyDictionary<string, string>? metadata = null,
        CancellationToken cancellationToken = default)
    {
        var envelope = new Autogenerated.InvokeBindingRequest { Name = name, Operation = operation };

        if (data is not null)
        {
            envelope.Data = data;
        }

        if (metadata is not null)
        {
            foreach (var kvp in metadata)
            {
                envelope.Metadata.Add(kvp.Key, kvp.Value);
            }
        }

        var grpcCallOptions = DaprClientUtilities.ConfigureGrpcCallOptions(typeof(DaprBindingsClient).Assembly,
            this.DaprApiToken, cancellationToken);
        try
        {
            return await Client.InvokeBindingAsync(envelope, grpcCallOptions);
        }
        catch (RpcException ex)
        {
            throw new DaprException(
                "Binding operation failed: the Dapr endpoint indicated a failure. See InnerException for details.", ex);
        }
    }
}
