// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// ------------------------------------------------------------

namespace Dapr.Client
{
    using System;
    using System.Net.Http;
    using System.Text.Json;
    using Grpc.Net.Client;
    using Autogenerated = Autogen.Grpc.v1;

    /// <summary>
    /// Builder for building <see cref="DaprClient"/>
    /// </summary>
    public sealed class DaprClientBuilder : IDaprClientBuilder
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DaprClientBuilder"/> class.
        /// </summary>
        public DaprClientBuilder()
        {
            this.GrpcEndpoint = DaprDefaults.GetDefaultGrpcEndpoint();
            this.HttpEndpoint = DaprDefaults.GetDefaultHttpEndpoint();

            this.GrpcChannelOptions = new GrpcChannelOptions()
            {
                // The gRPC client doesn't throw the right exception for cancellation
                // by default, this switches that behavior on.
                ThrowOperationCanceledOnCancellation = true,
            };

            this.JsonSerializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web);
            this.DaprApiToken = DaprDefaults.GetDefaultApiToken();
        }

        // property exposed for testing purposes
        internal string GrpcEndpoint { get; private set; }

        // property exposed for testing purposes
        internal string HttpEndpoint { get; private set; }

        private Func<HttpClient> HttpClientFactory { get; set; }

        // property exposed for testing purposes
        internal JsonSerializerOptions JsonSerializerOptions { get; private set; }

        // property exposed for testing purposes
        internal GrpcChannelOptions GrpcChannelOptions { get; private set; }
        internal string DaprApiToken { get; private set; }

        /// <inheritdoc/>
        public DaprClientBuilder UseHttpEndpoint(string httpEndpoint)
        {
            ArgumentVerifier.ThrowIfNullOrEmpty(httpEndpoint, nameof(httpEndpoint));
            this.HttpEndpoint = httpEndpoint;
            return this;
        }

        // Internal for testing of DaprClient
        internal DaprClientBuilder UseHttpClientFactory(Func<HttpClient> factory)
        {
            this.HttpClientFactory = factory;
            return this;
        }

        /// <inheritdoc/>
        public DaprClientBuilder UseGrpcEndpoint(string grpcEndpoint)
        {
            ArgumentVerifier.ThrowIfNullOrEmpty(grpcEndpoint, nameof(grpcEndpoint));
            this.GrpcEndpoint = grpcEndpoint;
            return this;
        }

        /// <inheritdoc/>
        public DaprClientBuilder UseJsonSerializationOptions(JsonSerializerOptions options)
        {
            this.JsonSerializerOptions = options;
            return this;
        }

        /// <inheritdoc/>
        public DaprClientBuilder UseGrpcChannelOptions(GrpcChannelOptions grpcChannelOptions)
        {
            this.GrpcChannelOptions = grpcChannelOptions;
            return this;
        }

        /// <inheritdoc/>
        public DaprClientBuilder UseDaprApiToken(string apiToken)
        {
            this.DaprApiToken = apiToken;
            return this;
        }

        /// <inheritdoc/>
        public DaprClient Build()
        {
            var grpcEndpoint = new Uri(this.GrpcEndpoint);
            if (grpcEndpoint.Scheme != "http" && grpcEndpoint.Scheme != "https")
            {
                throw new InvalidOperationException("The gRPC endpoint must use http or https.");
            }

            if (grpcEndpoint.Scheme.Equals(Uri.UriSchemeHttp))
            {
                // Set correct switch to maksecure gRPC service calls. This switch must be set before creating the GrpcChannel.
                AppContext.SetSwitch("System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport", true);
            }

            var httpEndpoint = new Uri(this.HttpEndpoint);
            if (httpEndpoint.Scheme != "http" && httpEndpoint.Scheme != "https")
            {
                throw new InvalidOperationException("The HTTP endpoint must use http or https.");
            }

            var channel = GrpcChannel.ForAddress(this.GrpcEndpoint, this.GrpcChannelOptions);
            var client = new Autogenerated.Dapr.DaprClient(channel);

            var apiTokenHeader = DaprClient.GetDaprApiTokenHeader(this.DaprApiToken);
            var httpClient = HttpClientFactory is object ? HttpClientFactory() : new HttpClient();
            return new DaprClientGrpc(channel, client, httpClient, httpEndpoint, this.JsonSerializerOptions, apiTokenHeader);
        }
    }
}
