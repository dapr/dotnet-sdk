namespace Dapr.Actors.Generators;

using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Testing;
using Microsoft.CodeAnalysis.Text;
using VerifyCS = CSharpSourceGeneratorVerifier<ActorClientGenerator>;

public sealed class ActorClientGeneratorTests
{
    private const string GeneratorsNamespace = "Dapr.Actors.Generators";

    private const string ActorMethodAttributeText = $@"
        // <auto-generated/>

        #nullable enable

        using System;

        namespace {GeneratorsNamespace}
        {{
            [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)]
            internal sealed class ActorMethodAttribute : Attribute
            {{
                public string? Name {{ get; set; }}
            }}
        }}";

    private const string GenerateActorClientAttributeText = $@"
        // <auto-generated/>

        #nullable enable

        using System;

        namespace {GeneratorsNamespace}
        {{
            [AttributeUsage(AttributeTargets.Interface, AllowMultiple = false, Inherited = false)]
            internal sealed class GenerateActorClientAttribute : Attribute
            {{
                public string? Name {{ get; set; }}

                public string? Namespace {{ get; set; }}
            }}
        }}";

    [Fact]
    public async Task TestMethodWithNoArgumentsOrReturnValue()
    {
        var code = @"
            using Dapr.Actors.Generators;
            using System.Threading.Tasks;

            namespace Test
            {
                [GenerateActorClient]
                public interface ITestActor
                {
                    Task TestMethod();
                }
            }
        ";

        var expected = @"
// <auto-generated/>

namespace Test
{
    public sealed class TestActorClient : Test.ITestActor
    {
        private readonly Dapr.Actors.Client.ActorProxy actorProxy;

        public TestActorClient(Dapr.Actors.Client.ActorProxy actorProxy)
        {
            this.actorProxy = actorProxy;
        }

        public System.Threading.Tasks.Task TestMethod()
        {
            return this.actorProxy.InvokeMethodAsync(""TestMethod"");
        }
    }
}
";

        await new VerifyCS.Test
        {
            ReferenceAssemblies = ReferenceAssemblies.Net.Net60,
            TestState = 
            {
                AdditionalReferences = { MetadataReference.CreateFromFile(typeof(Dapr.Actors.Client.ActorProxy).Assembly.Location) },
                Sources = { code },
                GeneratedSources =
                {
                    ("Dapr.Actors.Generators/Dapr.Actors.Generators.ActorClientGenerator/Dapr.Actors.Generators.ActorMethodAttribute.g.cs", SourceText.From(ActorMethodAttributeText, Encoding.UTF8)),
                    ("Dapr.Actors.Generators/Dapr.Actors.Generators.ActorClientGenerator/Dapr.Actors.Generators.GenerateActorClientAttribute.g.cs", SourceText.From(GenerateActorClientAttributeText, Encoding.UTF8)),
                    ("Dapr.Actors.Generators/Dapr.Actors.Generators.ActorClientGenerator/ITestActor.g.cs", SourceText.From(expected, Encoding.UTF8))
                },
            },
        }.RunAsync();
    }
}