using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Dapr.Client;
using Grpc.Net.Client;
using Microsoft.Extensions.Configuration;
using Xunit;
using Autogenerated = Dapr.Client.Autogen.Grpc.v1;

namespace Dapr.Extensions.Configuration.Test
{
    public class DaprConfigurationStoreProviderTest
    {
        [Fact]
        public void TestConfigurationStoreExtension_ThrowsWithNullStore()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddDaprConfigurationStore(null, new List<string>(), daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestConfigurationStoreExtension_ThrowsWithEmptyStore()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentException>(() =>
            {
                new ConfigurationBuilder().AddDaprConfigurationStore(string.Empty, new List<string>(), daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestConfigurationStoreExtension_ThrowsWithNullKeys()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddDaprConfigurationStore("configstore", null, daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestConfigurationStoreExtension_ThrowsWithNullClient()
        {
            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddDaprConfigurationStore("configstore", new List<string>(), null, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestSubscribeConfigurationStoreExtension_ThrowsWithNullStore()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddStreamingDaprConfigurationStore(null, new List<string>(), daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestSubscribeConfigurationStoreExtension_ThrowsWithEmptyStore()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentException>(() =>
            {
                new ConfigurationBuilder().AddStreamingDaprConfigurationStore(string.Empty, new List<string>(), daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestSubscribeConfigurationStoreExtension_ThrowsWithNullKeys()
        {
            var daprClient = new DaprClientBuilder()
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = new TestHttpClient() })
                .Build();

            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddStreamingDaprConfigurationStore("configstore", null, daprClient, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public void TestSubscribeConfigurationStoreExtension_ThrowsWithNullClient()
        {
            Assert.Throws<ArgumentNullException>(() =>
            {
                new ConfigurationBuilder().AddStreamingDaprConfigurationStore("configstore", new List<string>(), null, TimeSpan.FromSeconds(5));
            });
        }

        [Fact]
        public async Task TestConfigurationStoreExtension_ProperlyStoresValues()
        {
            // Sample item.
            var item = new ConfigurationItem("testKey", "testValue", "v1", null);

            // Configure Client
            var httpClient = new TestHttpClient()
            {
                Handler = async (entry) =>
                {
                    var items = new List<ConfigurationItem>() { item };
                    await SendResponseWithConfiguration(items, entry);
                }
            };

            var daprClient = new DaprClientBuilder()
                .UseHttpClientFactory(() => httpClient)
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = httpClient })
                .Build();

            var config = new ConfigurationBuilder()
                    .AddDaprConfigurationStore("store", new List<string>(), daprClient, TimeSpan.FromSeconds(5))
                    .Build();

            await Task.Delay(TimeSpan.FromMilliseconds(500));

            Assert.Equal(item.Value, config[item.Key]);
        }

        [Fact]
        public async Task TestStreamingConfigurationStoreExtension_ProperlyStoresValues()
        {
            // Sample item.
            var item = new ConfigurationItem("testKey", "testValue", "v1", null);

            // Configure Client
            var httpClient = new TestHttpClient()
            {
                Handler = async (entry) =>
                {
                    var items = new List<ConfigurationItem>() { item };
                    await SendStreamingResponseWithConfiguration(items, entry);
                }
            };

            var daprClient = new DaprClientBuilder()
                .UseHttpClientFactory(() => httpClient)
                .UseGrpcChannelOptions(new GrpcChannelOptions { HttpClient = httpClient })
                .Build();

            var config = new ConfigurationBuilder()
                    .AddStreamingDaprConfigurationStore("store", new List<string>(), daprClient, TimeSpan.FromSeconds(5))
                    .Build();

            await Task.Delay(TimeSpan.FromMilliseconds(500));

            Assert.Equal(item.Value, config[item.Key]);
        }

        private async Task SendResponseWithConfiguration(List<ConfigurationItem> items, TestHttpClient.Entry entry)
        {
            var configurationResponse = new Autogenerated.GetConfigurationResponse();
            foreach (var item in items)
            {
                configurationResponse.Items.Add(new Autogenerated.ConfigurationItem()
                {
                    Key = item.Key,
                    Value = item.Value,
                    Version = item.Version
                });
            }

            var streamContent = await GrpcUtils.CreateResponseContent(configurationResponse);
            var response = GrpcUtils.CreateResponse(HttpStatusCode.OK, streamContent);
            entry.Completion.SetResult(response);
        }

        private async Task SendStreamingResponseWithConfiguration(List<ConfigurationItem> items, TestHttpClient.Entry entry)
        {
            var streamResponse = new Autogenerated.SubscribeConfigurationResponse();
            streamResponse.Id = "testId";
            foreach (var item in items)
            {
                streamResponse.Items.Add(new Autogenerated.ConfigurationItem()
                {
                    Key = item.Key,
                    Value = item.Value,
                    Version = item.Version
                });
            }

            var streamContent = await GrpcUtils.CreateResponseContent(streamResponse);
            var response = GrpcUtils.CreateResponse(HttpStatusCode.OK, streamContent);
            entry.Completion.SetResult(response);
        }
    }
}
